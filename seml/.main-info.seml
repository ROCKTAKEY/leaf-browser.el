`(,@(progn (push path callstack) nil)
  ,@(progn (push '(:id introduction :disp "Introduction") toc)
           (push '(:id custom-types :disp "Customization Types") toc)
           (push '(:id about :disp "About") toc)
           (push '(:id depended-license :disp "License of Dependend software") toc)
           (push '(:id license :disp "License") toc)
           
           nil)
  (div ((id . "introduction") (class . "section scrollspy"))
    (h2 nil "info")
    (p ((class . "caption"))
      "leaf-browser.elをインストールしていただきありがとうございます。"
      "このページではこのパッケージを使用する上での参考情報をまとめています。")
    (p ((class . "caption"))
      "このパッケージにより、Emacsがあなたにとってよりフレンドリーになり、困難を" (strong nil "一緒に乗り越えるかけがいのない友") "になることを願っています。"))
  (div ((id . "custom-types") (class . "section scrollspy"))
    (h3 nil "Customization Types")
    (p ((class . "caption"))
      "leaf-browser.elではcustom-modeと同様の操作感を提供するように努力しています。"
      "そのため GNU Emacs Lisp Reference Manual 14.4 "
      (a ((target . "_brank") (href . "https://ayatakesi.github.io/lispref/24.5/elisp.html#Customization-Types"))
        "Customization Types")
      "より、custom-modeのマニュアルを引用します。")
    (p ((class . "caption"))
      "ある変数にどのcustomization typeが割り当てられているのかは、タイトルバーのdebugボタンを押すことで確認できます。")
    (div ((class . "section"))
      (h4 nil "UIでの変更を要求するタイプ")
      (h5 nil "boolean")
      (p ((class . "caption")) "値は真偽値 — nilかtです。choiceとconstを合わせて使用(次のセクションを参照)することにより、値がnilかtでなければならず、それぞれの値に固有の意味に適合する説明テキストを指定することもできます。")
      (h5 nil "integer")
      (p ((class . "caption")) "値は数(浮動小数点数または整数)でなければなりません。")
      (h5 nil "float")
      (p ((class . "caption")) "値は浮動小数点数でなければなりません。"))
    (div ((class . "section"))
      (h4 nil "パスを要求するタイプ")
      (h5 nil "file")
      (p ((class . "caption")) "値はファイル名でなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "(file :must-match t)")
      (p ((class . "caption")) "値は既存のファイル名でなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "directory")
      (p ((class . "caption")) "値はディレクトリー名でなければなりません。ウィジェットは補完を提供します。"))
    (div ((class . "section"))
      (h4 nil "補完を要求するタイプ")
      (h5 nil "function")
      (p ((class . "caption")) "値はラムダ式か関数名でなければなりません。ウィジェットは関数名にたいする補完を提供します。")
      (h5 nil "variable")
      (p ((class . "caption")) "値は変数名でなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "hook")
      (p ((class . "caption")) "値は関数のリストでなければなりません。このカスタマイズ型はフック変数にたいして使用されます。フック内での使用を推奨される関数のリストを指定するために、フック変数のdefcustom内で:optionsキーワードを使用できます。Defining Customization Variablesを参照してください。")
      (h5 nil "symbol")
      (p ((class . "caption")) "値はシンボルでなければなりません。これはカスタマイズバッファー内でシンボル名として表示されます。ウィジェットは補完を提供します。")
      (h5 nil "coding-system")
      (p ((class . "caption")) "値はコーディングシステム名でなければならず、M-TABで保管することができます。")
      (h5 nil "face")
      (p ((class . "caption")) "値はフェイス名のシンボルでなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "color")
      (p ((class . "caption")) "値は有効なカラー名でなければなりません。ウィジェットはカラー名にたいする補完と、同様に*Colors*バッファーに表示されるカラーサンプルとカラー名のリストからカラー名を選択するボタンを提供します。"))
    (div ((class . "section"))
      (h4 nil "自由記述フォームを要求するタイプ")
      (h5 nil "sexp")
      (p ((class . "caption")) "値はプリントおよび読み込むことができる任意のLispオブジェクトです。より特化した型の使用するために時間をとりたくない場合は、任意のオプションへのフォールバックとしてsexpを使用することができます。")
      (h5 nil "key-sequence")
      (p ((class . "caption")) "値はキーシーケンスです。カスタマイズバッファーは、kbd関数と同じ構文うぃ使用して、キーシーケンスを表示します。Key Sequencesを参照してください。")
      (h5 nil "string")
      (p ((class . "caption")) "値は文字列でなければなりません。カスタマイズバッファーはその文字列を区切り文字'\"'文字および\"'\"クォートなしで表示します。")
      (h5 nil "character")
      (p ((class . "caption")) "値は文字コードでなければなりません。文字コードは実際には整数ですが、この型は数字を表示せずに、バッファー内にその文字を挿入することにより値を表示します。")
      (h5 nil "regexp")
      (p ((class . "caption")) "string文字と同様ですが、その文字列は有効な正規表現でなければなりません。")))
  (div ((id . "about") (class . "section scrollspy"))
    (h3 nil "About"))
  (div ((id . "depended-license") (class . "section scrollspy"))
    (h4 nil "License of dependent software")
    (div ((class . "section"))
      (h5 nil "Unlicense")
      (p ((class . "caption"))
        (a ((href . "http://unlicense.org/")) "http://unlicense.org/"))

      (a ((href . "https://github.com/skeeto/emacs-web-server"))
        (h5 nil "skeeto/emacs-web-server"))
      (p ((class . "caption")) "Author: Christopher Wellons"))

    (div ((class . "section"))
      (h5 nil "MIT License")
      (p ((class . "caption"))
        (a ((href . "https://opensource.org/licenses/mit-license.php")) "https://opensource.org/licenses/mit-license.php"))

      (a ((href . "https://github.com/jquery/jquery"))
        (h5 nil "jquery/jquery"))
      (p ((class . "caption")) "Copyright JS Foundation and other contributors, https://js.foundation/")

      (a ((href . "https://github.com/Dogfalo/materialize"))
        (h5 nil "Dogfalo/materialize"))
      (p ((class . "caption")) "Copyright (c) 2014-2018 Materialize")

      (a ((href . "https://github.com/tholman/github-corners"))
        (h5 nil "tholman/github-corners"))
      (p ((class . "caption")) "Copyright (c) 2016 Tim Holman - http://tholman.com"))

    (div ((class . "section"))
      (h5 nil "GPLv3")
      (p ((class . "caption"))
        (a ((href . "https://www.gnu.org/licenses/gpl-3.0.html")) "https://www.gnu.org/licenses/gpl-3.0.html"))

      (a ((href . "https://www.gnu.org/software/emacs/"))
        (h5 nil "GNU Emacs"))
      (p ((class . "caption")) "Copyright (C) Free Software Foundation, Inc.")

      (a ((href . "https://github.com/emacs-mirror/emacs/blob/master/lisp/custom.el"))
        (h5 nil "custom.el"))
      (p ((class . "caption")) "Copyright (C) 1996-1997, 1999, 2001-2019 Free Software Foundation, Inc.")

      (a ((href . "https://github.com/jrhbailey/emacs-http-server"))
        (h5 nil "jrhbailey/emacs-http-server"))
      (p ((class . "caption")) "Copyright (C) 2011 Joe Schafer <joe@jschaf.com>")

      (a ((href . "https://github.com/hniksic/emacs-htmlize"))
        (h5 nil "hniksic/emacs-htmlize"))
      (p ((class . "caption")) "Copyright (C) 1997-2003,2005,2006,2009,2011,2012,2014,2017,2018 Hrvoje Niksic"))

    (div ((class . "section"))
      (h5 nil "AGPLv3")
      (p ((class . "caption"))
        (a ((href . "https://www.gnu.org/licenses/agpl-3.0.html")) "https://www.gnu.org/licenses/agpl-3.0.html"))

      (a ((href . "https://github.com/conao3/seml-mode.el"))
        (h5 nil "conao3/seml-mode.el"))
      (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")

      (a ((href . "https://github.com/conao3/leaf.el"))
        (h5 nil "conao3/leaf.el"))
      (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")

      (a ((href . "https://github.com/conao3/cort-test.el"))
        (h5 nil "conao3/cort-test.el"))
      (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")))

  (div ((id . "license") (class . "section scrollspy"))
    (h4 nil "License")
    (div ((class . "section"))
    (h5 nil "AGPLv3")
    (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")
    (p ((class . "caption"))
      (a ((href . "https://www.gnu.org/licenses/agpl-3.0.html")) "https://www.gnu.org/licenses/agpl-3.0.html")))
    (div ((class . "section"))
      (h5 nil "License Description")
      (p ((class . "caption"))
        "このパッケージはGNU Emacsへの感謝をもって、RMSとFree Software Foundation, Inc.のフリーソフトウェアの理念に基づき、"
        "GPL系ライセンスであるAGPLv3のもとで公開します。")
      (p ((class . "caption"))
        "AGPLv3は有名なライセンスではありませんが、このパッケージは通常、インターネットを介したサーバー上で実行されるソフトではないため、多くの場合、GPLv3と変わりません。")
      (p ((class . "caption"))
        "私はGPLの基礎になっている自由ソフトウェアの" (a ((href . "https://www.gnu.org/licenses/quick-guide-gplv3.html")) "4つの理念")
        "に賛同し、このライセンスのもとで公開することで、このパッケージがあなたにとって最大の利益をもたらすことを願います。")
      (p ((class . "caption"))
        "なお、もしこのleaf-browser.elが役に立つ/面白いと感じられたなら、私の" (a ((href . "https://www.patreon.com/conao3")) "Patreon") "になってもらえないでしょうか。"
        "あなたの支援によって、このパッケージや他の全く新しいパッケージの開発を続けることが出来ます。")
      (p ((class . "caption"))
        "支援者の方には寄付のお礼と証明を兼ねて、このパッケージのホームページのフッターにアイコンを表示させていただきます。"
        "詳細は私の" (a ((href . "https://www.patreon.com/conao3")) "Patreon") "のページをご覧ください。よろしくお願いします。")))

  (div ((class . "section"))
    (h4 nil "Author")
    (div ((class . "section"))
    (h5 nil "Naoya Yamashita (@conao3)")
    (p ((class . "caption"))
       "広島県出身、広島新庄高校を卒業後、広島大学工学部第二類（電気・電子・システム・情報系）に入学。"
       "2018年度現在、学籍上は四回生だが、一回生のときの教養の成績がたたり、情報系に振り分けられなかった。"
       "電子系に配属されてしまい、基準の単位数を2単位下回ったため研究室配属されず、留年が確定済み。")
    (p ((class . "caption"))
      "本年度は教職取得を目指し、高校普通教科情報及び工業高校の教職単位を教育学部にて履修するほか、CCNAと応用情報技術者試験の勉強、Emacsパッケージ開発に時間を使った。")
    (p ((class . "caption"))
      "CCNAはまだ受験できてませんが、" (a ((href . "https://twitter.com/conao_3/status/1085856941828534272")) "応用情報技術者試験に合格")
      "し、Emacsパッケージ開発などのOSS活動は" (a ((href . "https://github.com/conao3")) "GitHub") "にて確認できます。"
      "ぜひ" (a ((href . "https://www.patreon.com/conao3")) "Patreon") "での支援をお願いします！"))
    (div ((class . "section"))
      (h5 nil
        "作成したEmacsパッケージ"
        
        (h6 nil "leaf.el")
        (p ((class . "caption"))
          "use-pacakgeの別実装をスクラッチから開発した。"
          "use-packageは最高だと思いつつ、キーワードの追加が（私にとって）難しく、付随する様々な問題が目立ってきたため開発に着手した。")
        (p ((class . "caption"))
          "スクラッチから開発したついでにEmacs-22という化石でも問題なく動くようにした。この設計はEmacs-jpで度々議論になる（）")

        (h6 nil "leaf-browser.el")
        (p ((class . "caption"))
          "Emacs-jpの雑談からアイデアを仕入れ、技術的な課題がないと思ったため開発に着手した。"
          "Emacsのhttpdサーバーでホストするのだから、Emacsフレンドリーな後述のSEMLを利用したところ、種々の問題が噴出した。"
          "しかしleaf-browser.elとともにseml-mode.elも成長できたので、今度SEMLを使うパッケージは効率的に開発できる。。はず。。？")

        (h6 nil "seml-mode.el")
        (p ((class . "caption"))
          "Emacs上のhttpdを使うならその元となるデータもS式のほうがEmacsフレンドリーなのではと思い、開発に着手した。"
          "当初はSEML用のインデント、ハイライトのみを提供するメジャーモードとして開発していたが、leaf-browser.elの開発に伴い、ユーティリティ関数も充実してきている。")
        (p ((class . "caption"))
          "そもそもの元ネタはgauche。Lisp界では新しい発想ではないはずだが、あまりそれを支援するパッケージはないみたいだった。。")

        (h6 nil "cort-test.el")
        (p ((class . "caption"))
          "Emacs標準Elispテストフレームワークである、ert.elはEmacs-24からでのみ動作する他、（私にとって）理解不能なエラーメッセージを出力し、デバッグの助けにならなかったため開発に着手した。"
          "ert.elの柔軟なテスト記述を受け継ぎつつ、分かりやすく見やすいフィードバックを表示するように開発した。"
          "Emacs-22から動作するパッケージのテストに使うため、当然、Emacs-22でも動く。")

        (h6 nil "feather.el")
        (p ((class . "caption"))
          "標準のpackage.elは「パッケージの並列ダウンロード」と「ダウンロード中のコンパイル」を実行せず、無為に時間を使っていると思ったため開発に着手した。"
          "leaf.elの:ensureキーワードの標準のバックエンドとして利用される。つまり、Emacs-22でも動く。")

        (h6 nil "feather-recipes.el")
        (p ((class . "caption"))
          "feather.elがローカルでする作業を少なくするために、MELPAのレシピから毎日feather.el用のS式を生成する。"
          "開発の過程でMELPAのrecipe.jsonが壊れている疑いが発生し、その修正のPRを作成して送った。")
        (p ((class . "caption"))
          "しかしMELPAのコアファイルであり、recipe.jsonはWeb上で公開され影響範囲が把握できないとの理由で未だにマージされていない。"
          "featuer-recipes.elは送ったPRをマージした、このレポジトリが毎日upstreamの更新をマージするように設定し、そのjsonを利用することで問題を回避した。")

        (h6 nil "orglyth.el")
        (p ((class . "caption"))
          "org-mode文書群からディレクトリ階層ごとexportするorg-publishという機能があるが、その設定が曲者だったため開発に着手した。"
          "基本的にはorg-mode文書群から静的ブログサイトを出力する目的で使用する。私のブログもこのパッケージから出力された静的HTMLで運営されている。")
        ))))
