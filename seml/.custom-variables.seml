(let* ((form-fn (lambda (sym)
                  (let ((symstr (symbol-name sym)))
                    (pcase (get sym 'custom-type)
                      ('boolean
                       `((div ((class . "col s12"))
                           (label nil
                             (input ((name . ,(concat "input-" symstr))
                                     (type . "checkbox")))
                             (span nil ,symstr)))))
                      (_
                       `((div ((class . "col s12"))
                           (h5 nil ,symstr)
                           (p ((class . "caption"))
                             "This custom type is not supported"))))))))
       (doc-fn  (lambda (sym)
                  (let ((symstr (symbol-name sym)))
                    `((div ((class . "col s12"))
                        (p ((class . "caption"))
                          ,(replace-regexp-in-string
                            ";"
                            ";\n"
                            (or (when (stringp (get sym 'variable-documentation))
                                  (get sym 'variable-documentation))
                                "No docstring..."))))))))
       (custom-type (cdr '(:dummy
                           boolean integer number float
                           file directory
                           function variable hook symbol coding-system face color
                           sexp key-sequence string character regexp)))
       (custom-piority-fn (lambda (x)
                            (if (atom (get x 'custom-type))
                                (length
                                 (memq (get x 'custom-type)
                                       custom-type))
                              0)))
       (alfa-sort-fn (lambda (a b)
                       (string< (symbol-name a)
                                (symbol-name b))))
       (type-sort-fn (lambda (a b)
                       (> (funcall custom-piority-fn a)
                          (funcall custom-piority-fn b))))
       (custom-elms (sort
                     (sort
                     (mapcan (lambda (elm)
                               (let ((sym  (car elm))
                                     (type (cadr elm)))
                                 (when (and (eq type 'custom-variable))
                                   `(,sym))))
                             (get lastarg-sym 'custom-group))
                     alfa-sort-fn)
                    type-sort-fn)))
  `(,@(progn (push path callstack) nil)
    (ul ((class . "browser-default"))
      ,@(mapcar (lambda (sym)
                  `(li nil
                     (div ((class . "ul-header")) ,(pp-to-string sym))
                     ,(seml-htmlize 'emacs-lisp-mode
                                    (with-temp-buffer
                                      (insert (get sym 'variable-documentation))
                                      (goto-char (point-min))
                                      (move-end-of-line 1)
                                      (delete-region (point) (point-max))
                                      (buffer-substring-no-properties (point-min) (point-max))))
                     ,(when debugp
                         `(div ((class . "row"))
                             (div ((class . "col s2"))
                               (p nil
                                 "priority: "
                                 ,(pp-to-string
                                   (funcall custom-piority-fn sym))))
                             (div ((class . "col s10"))
                               (div ((class . "doc"))
                               (pre nil
                                 (span ((class . "constant")) "default") ": "
                                 ,(seml-htmlize
                                   'emacs-lisp-mode
                                   (pp-to-string
                                    (if (listp (get sym 'standard-value))
                                        (car (get sym 'standard-value))
                                      (get sym 'standard-value))))
                                 (span ((class . "constant")) "type") ": "
                                 ,(seml-htmlize
                                   'emacs-lisp-mode
                                   (pp-to-string (get sym 'custom-type)))
                                 ))
                               )))))
                custom-elms))
    ,@(if custom-elms
          (mapcar
           (lambda (sym)
               `(div ((class . "row"))
                  ,@(funcall form-fn sym)
                  ,@(funcall doc-fn sym)
                  ,@(when debugp
                      `(,@(seml-import ".custom-variables-debug.seml")))))
           custom-elms)
        `((div ((class . "row"))
            (div ((class . "col s12"))
              (h5 nil "No Custom Variables...")))))))
