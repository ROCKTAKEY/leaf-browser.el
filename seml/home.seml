(let* ((root-url        "/leaf-browser") ;; "/seml-mode/live-refresh")
       (seml-import-dir (expand-file-name "seml/" lbrowser-root-dir))

       (url             httpd-path)
       (split-path      httpd-split-path)
       (query           httpd-query)

       (args            (cddr split-path))
       (lastarg-inx     1)
       (lastarg-str     (progn
                          (while (string= "" (car (last split-path lastarg-inx)))
                            (incf lastarg-inx))
                          (car (last split-path lastarg-inx))))
       (lastarg-sym     (intern lastarg-str))

       (debugp)
       (toc) (callstack '("home.seml"))
       (homep) (groupp) (loadpathp) (undefinedp))

  ;; url-encode: (url-hexify-string str)
  ;; url-decode: (httpd-unhex str)

  (progn
    "initialize variables"
    (pcase type
      ((or "" 'nil) (setq homep t))
      ("group"      (setq groupp t))
      ("loadpath"   (setq loadpathp t))
      (_            (setq undefinedp t)))

    (when (and (not (assoc "release" httpd-query))
               lbrowser-debugp)
      (setq debugp t))

    (when (or homep groupp)
      (let ((group-sym (if homep 'emacs lastarg-sym)))
        (unless (memq group-sym lbrowser-loaded-custom-group)
          (push group-sym lbrowser-loaded-custom-group)
          (with-temp-buffer
            (custom-buffer-create-internal
             `((,group-sym custom-group))))))))

  (eval
   `(let* ,(if (<= 2 (- (length split-path)
                        (- lastarg-inx 1)))
               (mapcar (lambda (n)
                         `(,(intern (format "arglast%s" n))
                           ,(httpd-unhex
                             (car (last split-path (+ n lastarg-inx))))))
                       (number-sequence 0 (- (length split-path)
                                             (- lastarg-inx 1)
                                             2)))
             nil)
      `(html nil
         ,@(seml-import ".head.seml")
         (body nil
           ,@(seml-import ".header.seml")
           ,@(seml-import ".main.seml")
           ,@(seml-import ".footer.seml")
           ,@(seml-import ".script.seml"))))))
