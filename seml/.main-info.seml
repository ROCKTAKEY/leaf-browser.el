`(,@(progn (push path callstack) nil)
  ,@(progn (push '(:id introduction :disp "Introduction") toc)
           (push '(:id custom-types :disp "Customization Types") toc)
           (push '(:id simple-types :disp "Simple Types") toc)
           (push '(:id composite-types :disp "Composite Types") toc)
           (push '(:id about :disp "About") toc)
           (push '(:id depending-license :disp "License of Depending Software") toc)
           (push '(:id license :disp "License") toc)
           (push '(:id author :disp "Author") toc)
           nil)
  (div ((id . "introduction") (class . "section scrollspy"))
    (h2 nil "info")
    (p ((class . "caption"))
      "leaf-browser.elをインストールしていただきありがとうございます。"
      "このページではこのパッケージを使用する上での参考情報をまとめています。")
    (p ((class . "caption"))
      "このパッケージにより、Emacsがあなたにとってよりフレンドリーになり、困難を" (strong nil "一緒に乗り越えるかけがいのない友") "になることを願っています。"))
  (div ((id . "custom-types") (class . "section scrollspy"))
    (h3 nil "Customization Types")
    (p ((class . "caption"))
      "leaf-browser.elではcustom-modeと同様の操作感を提供するように努力しています。"
      "そのため GNU Emacs Lisp Reference Manual 14.4 "
      (a ((target . "_brank") (href . "https://ayatakesi.github.io/lispref/24.5/elisp.html#Customization-Types"))
        "Customization Types")
      "より、custom-modeのマニュアルを引用します。日本語翻訳作業を行われた、Ayanokoji Takesi("
      (a ((href . "https://github.com/ayatakesi")) "@ayatakesi")
      ")さんに感謝します。")
    (p ((class . "caption"))
      "ある変数にどのcustomization typeが割り当てられているのかは、タイトルバーのdebugボタンを押すことで確認できます。"
      "Simple Typesにおいてはleaf-browser.elでの利用に有用なように、独自に並び替えとセクション分けを行いました。"))

  (div ((id . "simple-types") (class . "sction scrollspy"))
    (h3 nil "Simple Types")
    (p ((class . "caption"))
      "このセクションでは、すべてのシンプルデータ型を説明します。これらのカスタマイズ型のうちのいくつかにたいして、カスタマイズウィジェットはC-M-iまたはM-TABによる、インライン補完を提供します。")
    (div ((class . "section"))
      (h4 nil "UIでの変更を要求するタイプ")
      (h5 nil "boolean")
      (p ((class . "caption")) "値は真偽値 — nilかtです。choiceとconstを合わせて使用(次のセクションを参照)することにより、値がnilかtでなければならず、それぞれの値に固有の意味に適合する説明テキストを指定することもできます。")
      (h5 nil "integer")
      (p ((class . "caption")) "値は数(浮動小数点数または整数)でなければなりません。")
      (h5 nil "float")
      (p ((class . "caption")) "値は浮動小数点数でなければなりません。"))

    (div ((class . "section"))
      (h4 nil "パスを要求するタイプ")
      (h5 nil "file")
      (p ((class . "caption")) "値はファイル名でなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "(file :must-match t)")
      (p ((class . "caption")) "値は既存のファイル名でなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "directory")
      (p ((class . "caption")) "値はディレクトリー名でなければなりません。ウィジェットは補完を提供します。"))

    (div ((class . "section"))
      (h4 nil "補完を要求するタイプ")
      (h5 nil "function")
      (p ((class . "caption")) "値はラムダ式か関数名でなければなりません。ウィジェットは関数名にたいする補完を提供します。")
      (h5 nil "variable")
      (p ((class . "caption")) "値は変数名でなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "hook")
      (p ((class . "caption")) "値は関数のリストでなければなりません。このカスタマイズ型はフック変数にたいして使用されます。フック内での使用を推奨される関数のリストを指定するために、フック変数のdefcustom内で:optionsキーワードを使用できます。Defining Customization Variablesを参照してください。")
      (h5 nil "symbol")
      (p ((class . "caption")) "値はシンボルでなければなりません。これはカスタマイズバッファー内でシンボル名として表示されます。ウィジェットは補完を提供します。")
      (h5 nil "coding-system")
      (p ((class . "caption")) "値はコーディングシステム名でなければならず、M-TABで保管することができます。")
      (h5 nil "face")
      (p ((class . "caption")) "値はフェイス名のシンボルでなければなりません。ウィジェットは補完を提供します。")
      (h5 nil "color")
      (p ((class . "caption")) "値は有効なカラー名でなければなりません。ウィジェットはカラー名にたいする補完と、同様に*Colors*バッファーに表示されるカラーサンプルとカラー名のリストからカラー名を選択するボタンを提供します。"))

    (div ((class . "section"))
      (h4 nil "自由記述フォームを要求するタイプ")
      (h5 nil "sexp")
      (p ((class . "caption")) "値はプリントおよび読み込むことができる任意のLispオブジェクトです。より特化した型の使用するために時間をとりたくない場合は、任意のオプションへのフォールバックとしてsexpを使用することができます。")
      (h5 nil "key-sequence")
      (p ((class . "caption")) "値はキーシーケンスです。カスタマイズバッファーは、kbd関数と同じ構文うぃ使用して、キーシーケンスを表示します。Key Sequencesを参照してください。")
      (h5 nil "string")
      (p ((class . "caption")) "値は文字列でなければなりません。カスタマイズバッファーはその文字列を区切り文字'\"'文字および\"'\"クォートなしで表示します。")
      (h5 nil "character")
      (p ((class . "caption")) "値は文字コードでなければなりません。文字コードは実際には整数ですが、この型は数字を表示せずに、バッファー内にその文字を挿入することにより値を表示します。")
      (h5 nil "regexp")
      (p ((class . "caption")) "string文字と同様ですが、その文字列は有効な正規表現でなければなりません。")))

  (div ((id . "composite-types") (class . "section scrollspy"))
    (h3 nil "Composite Types")
    (p ((class . "caption"))
      "適切なシンプル型がないときは、複合型(composite types)を使うことができます。複合型は特定のデータによる他の型から、新しい型を構築します。指定された型またはデータは、その複合型の引数(argument)と呼ばれます。複合型は通常、以下のようなものです:")
    ,(seml-htmlize 'emacs-lisp-mode "(constructor arguments…)")
    (p ((class . "caption"))
      "しかし、以下のように引数の前にkeyword-valueペアーを追加することもできます。")
    ,(seml-htmlize 'emacs-lisp-mode "(constructor {keyword value}… arguments…)")
    (p ((class . "caption"))
      "以下のテーブルに、はコンストラクター(constructor)と、複合型を記述するためにそれらを使用する方法を示します:")

    (h5 nil "(cons car-type cdr-type)")
    (p ((class . "caption"))
      "値はコンスセルでなければならず、CARはcar-type、CDRはcdr-typeに適合していなければなりません。たとえば、(cons string symbol)は、(\"foo\" . foo)のような値にマッチするデータ型です。")
    (p ((class . "caption"))
      "カスタマイズバッファーでは、CARとCDRは、それぞれ特定のデータ型に応じて、別々に表示・編集されます。")

    (h5 nil "(list element-types…)")
    (p ((class . "caption"))
      "値は、element-typesで与えられる要素と数が正確に一致するリストでなければならず、リストの各要素はそれぞれ対応するelement-typeに適合しなければなりません。")
    (p ((class . "caption"))
      "たとえば、(list integer string function)は、３つの要素のリストを示し、１つ目の要素は整数、２つ目の要素は文字列、３つ目の要素は関数です。")
    (p ((class . "caption"))
      "カスタマイズバッファーでは、各要素は、それぞれ特定のデータ型に応じて、別々に表示・編集されます。")

    (h5 nil "(group element-types…)")
    (p ((class . "caption"))
      "これはlistと似ていますが、Customバッファー内でのテキストのフォーマットが異なります。listは各要素の値を、そのタグでラベルづけしますが、groupはそれを行いません。")

    (h5 nil "(vector element-types…)")
    (p ((class . "caption"))
      "これはlistと似ていますが、リストではなくベクターでなければなりません。各要素はlistの場合と同様に機能します。")

    (h5 nil "(alist :key-type key-type :value-type value-type)")
    (p ((class . "caption"))
      "値はコンスセルのリストでなければならず、各セルのCARはカスタマイズ型key-typeのキーを表し、同じセルのCDRはカスタマイズ型value-typeの値を表します。ユーザーはkey/valueペアーの追加や削除ができ、各ペアのキーと値の両方を編集することができます。")
    (p ((class . "caption"))
      "省略された場合、key-typeとvalue-typeのデフォルトは、sexpです。")
    (p ((class . "caption"))
      "ユーザーは指定されたkey-typeにマッチする任意のキーを追加できますが、:options(Defining Customization Variablesを参照してください)で指定することにより、あるキーを優先的に扱うことができます。指定されたキーは、(適切な値とともに)常にカスタマイズバッファーに表示されます。また、alistにkey/valueを含める、除外する、または無効にするかを指定するチェックボックスも一緒に表示されます。ユーザーは:optionsキーワード引数により指定された値は、変更できません。")
    (p ((class . "caption"))
      ":optionsキーワードにたいする引数は、alist内の適切なキーにたいする仕様のリストであるべきです。これらは通常、単純なアトムであり、それらは自身をを意味します。たとえば:")
    ,(seml-htmlize 'emacs-lisp-mode ":options '(\"foo\" \"bar\" \"baz\")")
    (p ((class . "caption"))
      "これは、名前が\"foo\"、\"bar\"、\"baz\"の、３つの\"既知\"のキーがあることを指定し、それらは常に最初に表示されます。")
    (p ((class . "caption"))
      "たとえば\"bar\"キーに対応する値を整数だけにするというように、特定のキーに対して値の型を制限したいときがあるかもしれません。これはリスト内でアトムのかわりにリストを使用することにより、指定することができます。前述のように、１つ目の要素はそのキーを指定し、２つ目の要素は値の型を指定します。たとえば:")
    ,(seml-htmlize 'emacs-lisp-mode ":options '(\"foo\" (\"bar\" integer) \"baz\")")
    (p ((class . "caption"))
      "最後に、キーが表示される方法を変更したいときもあるかもしれません。デフォルトでは、:optionsキーワードで指定された特別なキーはユーザーが変更できないので、キーは単にconstとして表示されます。しかし、たとえばそれが関数バインディングをもつシンボルだと知っている場合はfunction-itemといったように、あるキーの表示のために、より特化した型を使用したいと思うかもしれません。これは、キーに対してシンボルを使うかわりに、カスタマイズ型指定を使用することにより、行うことができます。")
    ,(seml-htmlize 'emacs-lisp-mode ":options '(\"foo\"\n ((function-item some-function) integer)\n \"baz\")")
    (p ((class . "caption"))
      "多くのalistは、コンスセルのかわりに２要素のリストを使用します。たとえば、")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(defcustom cons-alist '(("foo" . 1) ("bar" . 2) ("baz" . 3)) "Each element is a cons-cell (KEY . VALUE).")))
    (p ((class . "caption"))
      "のかわりに以下を使用します")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(defcustom list-alist '(("foo" 1) ("bar" 2) ("baz" 3)) "Each element is a list of the form (KEY VALUE).")))
    (p ((class . "caption"))
      "リストはコンスセルの最上位に実装されているため、上記のlist-alistを、コンスセルのalist(value-typeが実際の値を含む１要素のリストであるような)として扱うことができます。")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(defcustom list-alist '(("foo" 1) ("bar" 2) ("baz" 3)) "Each element is a list of the form (KEY VALUE)." :type '(alist :value-type (group integer)))))
    (p ((class . "caption"))
      "listのかわりにgroupを使用するのは、その目的に適したフォーマットのためだけです。")
    (p ((class . "caption"))
      "同様に、以下のようなトリックの類を用いることにより、より多くの値が各キー連づけられたalistを得ることができます:")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(defcustom person-data '(("brian"  50 t) ("dorith" 55 nil) ("ken"    52 t)) "Alist of basic info about people. Each element has the form (NAME AGE MALE-FLAG)." :type '(alist :value-type (group integer boolean)))))

    (h5 nil "(plist :key-type key-type :value-type value-type)")
    (p ((class . "caption"))
      "このカスタマイズ型はalist(上位参照)と似ていますが、(1)情報がプロパティーリスト(Property Listsを参照してください)に格納され、(2)key-typeが省略された場合、デフォルトはsexpではなく、symbolになります。")
    (p ((class . "caption"))
      "(choice alternative-types…)")
    (p ((class . "caption"))
      "値はalternative-typesのうちの1つに適合しなければなりません。たとえば、(choice integer string)では整数か文字列が許されます。")
    (p ((class . "caption"))
      "カスタマイズバッファーでは、ユーザーはメニューを使用して候補を選択して、それらの候補にたいして通常の方法で値を編集できます。")
    (p ((class . "caption"))
      "通常この選択からメニューの文字列が自動的に決定されます。しかし候補の中に:tagキーワードを含めることにより、メニューにたいして異なる文字列を指定できます。たとえば、空白の数を意味する整数と、その通りに使用したいテキストにたいする文字列の場合は、以下のような方法でカスタマイズ型を記述したいかもしれません")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(choice (integer :tag "Number of spaces") (string :tag "Literal text"))))
    (p ((class . "caption"))
      "この場合メニューは、‘Number of spaces’と‘Literal text’を提示します。")
    (p ((class . "caption"))
      "const以外のnilが有効な値ではない候補には、:valueキーワードを使用して、有効なデフォルト値を指定するべきです。Type Keywordsを参照してください。")
    (p ((class . "caption"))
      "複数の候補によりいくつかの値が提供される場合、カスタマイズは適合する値をもつ最初の候補を選択します。これは常に、もっとも特有な型を最初に、もっとも一般的な型を最後にリストすべきことを意味します。以下は適切な使い方の例です:")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(choice (const :tag "Off" nil) symbol (sexp :tag "Other"))))
    (p ((class . "caption"))
      "この使い方では、特別な値nilはその他のシンボルとは別に扱われ、シンボルは他のLisp式とは別に扱われます。")

    (h5 nil "(radio element-types…)")
    (p ((class . "caption"))
      "これはchoiceと似ていますが、選択はメニューではなく、\"ラジオボタン\"で表示されます。これは該当する選択にたいしてドキュメントが表示できる利点があるので、関数定数(function-itemカスタマイズ型)の選択に適す場合があります。")

    (h5 nil "(const value)")
    (p ((class . "caption"))
      "値はvalueでなければならず、他は許されません。")
    (p ((class . "caption"))
      "constは主にchoiceの中で使用されます。たとえば、(choice integer (const nil))では、整数かnilが選択できます。")
    (p ((class . "caption"))
      "choiceの中では、:tagとともにconstが使用される場合があります。たとえば、")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(choice (const :tag "Yes" t) (const :tag "No" nil) (const :tag "Ask" foo))))
    (p ((class . "caption"))
      "これはtがyes、nilがno、fooが“ask”を意味することを示します。")

    (h5 nil "(other value)")
    (p ((class . "caption"))
      "この候補は任意のLisp値にマッチできますが、ユーザーがこの候補を選択した場合は、値valueが選択されます。")
    (p ((class . "caption"))
      "otherは主にchoiceの最後の要素に使用されます。たとえば、")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(choice (const :tag "Yes" t) (const :tag "No" nil) (other :tag "Ask" foo))))
    (p ((class . "caption"))
      "これはtがyes、nilがno、それ以外は“ask”を意味することを示します。ユーザーが候補メニューから'Ask'を選択した場合は、値fooが指定されます。しかし、その他の値(t、nil、fooを除く)では、fooと同様に'Ask'が表示されます。")

    (h5 nil "(function-item function)")
    (p ((class . "caption"))
      "constと同様ですが、値が関数のときに使用されます。これはドキュメント文字列も関数名と同じように表示します。ドキュメント文字列は、:docで指定した文字列か、function自身のドキュメント文字列です。")

    (h5 nil "(variable-item variable)")
    (p ((class . "caption"))
      "constと同様ですが、値が変数名のときに使用されます。これはドキュメント文字列も変数名と同じように表示します。ドキュメント文字列は、:docで指定した文字列か、variable自身のドキュメント文字列です。")

    (h5 nil "(set types…)")
    (p ((class . "caption"))
      "値はリストでなければならず、指定されたtypesの1つにマッチしなければなりません。")
    (p ((class . "caption"))
      "これはカスタマイズバッファーではチェックリストとして表示されるので、typesはそれぞれ対応する要素を1つ、あるいは要素をもちません。同じ1つのtypesにマッチするような、異なる2つの要素を指定することはできません。たとえば、(set integer symbol)は、リスト内で1つの整数、および/または1つのシンボルが許され、複数の整数や複数のシンボルは許されません。結果として、set内でintegerのような特定的ではない型を使用するのは稀です。")
    (p ((class . "caption"))
      "以下のように、const型はset内のtypesでよく使用されます:")
    (p ((class . "caption"))
      "(set (const :bold) (const :italic))")
    (p ((class . "caption"))
      "alist内で利用できる要素を示すために使用されることもあります:")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(set (cons :tag "Height" (const height) integer) (cons :tag "Width" (const width) integer))))
    (p ((class . "caption"))
      "これによりユーザーにオプションでheightとwidthの値を指定させることができます。")

    (h5 nil "(repeat element-type)")
    (p ((class . "caption"))
      "値はリストでなければならず、リストの各要素は型element-typeに適合しなければなりません。カスタマイズバッファーでは要素のリストとして表示され、'[INS]'および'[DEL]'ボタンにより、要素の追加や削除が行われます。")

    (h5 nil "(restricted-sexp :match-alternatives criteria)")
    (p ((class . "caption"))
      "これはもっとも汎用的な複合型の構築方法です。値はcriteriaを満足する任意のLispオブジェクトです。criteriaはリストで、リストの各要素は以下のうちの1つを満たす必要があります:")
    (p ((class . "caption"))
      "述語 — つまり、副作用をもたず引数は1つ、その引数に応じてnilか非nilのどちらかをリターンする関数。リスト内での述語の使用により、その述語が非nilをリターンするようなオブジェクトが許されることを意味する。")
    (p ((class . "caption"))
      "クォートされた定数 — つまり、'object。リスト内でこの要素は、object自身が容認される値であることを示す。")
    (p ((class . "caption"))
      "たとえば、")
    ,(seml-htmlize 'emacs-lisp-mode (pp-to-string '(restricted-sexp :match-alternatives (integerp 't 'nil))))
    (p ((class . "caption"))
      "これは整数、t、nilを正当な値として受け入れます。")
    (p ((class . "caption"))
      "カスタマイズバッファーは適切な値をそれらの入力構文ですべて表示し、ユーザーはこれらをテキストとして編集できます。")
    (p ((class . "caption"))
      "以下は複合型でキーワード/値ペアーとして使用できるキーワードのテーブルです:")

    (h5 nil ":tag tag")
    (p ((class . "caption"))
      "tagは、ユーザーとのコミュニケーションのために、その候補の名前として使用される。choice内に出現する型にたいして有用。")

    (h5 nil ":match-alternatives criteria")
    (p ((class . "caption"))
      "criteriaは可能な値とのマッチに使用されます。restricted-sexp内でのみ有用です。")

    (h5 nil ":args argument-list")
    (p ((class . "caption"))
      "型構築の引数としてargument-listの要素を使用します。たとえば、(const :args (foo))は(const foo)と等価です。明示的に:argsとく記述する必要があるのは稀です。なぜなら、最後のキーワード/値ペアーの後に続くものは何であれ、引数として認識されるからです。"))

  (div ((id . "about") (class . "section scrollspy"))
    (h3 nil "About"))
  (div ((id . "depending-license") (class . "section scrollspy"))
    (h4 nil "License of depending software")
    (div ((class . "section"))
      (h5 nil "Unlicense")
      (p ((class . "caption"))
        (a ((href . "http://unlicense.org/")) "http://unlicense.org/"))

      (a ((href . "https://github.com/skeeto/emacs-web-server"))
        (h5 nil "skeeto/emacs-web-server"))
      (p ((class . "caption")) "Author: Christopher Wellons"))

    (div ((class . "section"))
      (h5 nil "MIT License")
      (p ((class . "caption"))
        (a ((href . "https://opensource.org/licenses/mit-license.php")) "https://opensource.org/licenses/mit-license.php"))

      (a ((href . "https://github.com/jquery/jquery"))
        (h5 nil "jquery/jquery"))
      (p ((class . "caption")) "Copyright JS Foundation and other contributors, https://js.foundation/")

      (a ((href . "https://github.com/Dogfalo/materialize"))
        (h5 nil "Dogfalo/materialize"))
      (p ((class . "caption")) "Copyright (c) 2014-2018 Materialize")

      (a ((href . "https://github.com/tholman/github-corners"))
        (h5 nil "tholman/github-corners"))
      (p ((class . "caption")) "Copyright (c) 2016 Tim Holman - http://tholman.com"))

    (div ((class . "section"))
      (h5 nil "GPLv3")
      (p ((class . "caption"))
        (a ((href . "https://www.gnu.org/licenses/gpl-3.0.html")) "https://www.gnu.org/licenses/gpl-3.0.html"))

      (a ((href . "https://www.gnu.org/software/emacs/"))
        (h5 nil "GNU Emacs"))
      (p ((class . "caption")) "Copyright (C) Free Software Foundation, Inc.")

      (a ((href . "https://github.com/emacs-mirror/emacs/blob/master/lisp/custom.el"))
        (h5 nil "custom.el"))
      (p ((class . "caption")) "Copyright (C) 1996-1997, 1999, 2001-2019 Free Software Foundation, Inc.")

      (a ((href . "https://github.com/jrhbailey/emacs-http-server"))
        (h5 nil "jrhbailey/emacs-http-server"))
      (p ((class . "caption")) "Copyright (C) 2011 Joe Schafer <joe@jschaf.com>")

      (a ((href . "https://github.com/hniksic/emacs-htmlize"))
        (h5 nil "hniksic/emacs-htmlize"))
      (p ((class . "caption")) "Copyright (C) 1997-2003,2005,2006,2009,2011,2012,2014,2017,2018 Hrvoje Niksic"))

    (div ((class . "section"))
      (h5 nil "AGPLv3")
      (p ((class . "caption"))
        (a ((href . "https://www.gnu.org/licenses/agpl-3.0.html")) "https://www.gnu.org/licenses/agpl-3.0.html"))

      (a ((href . "https://github.com/conao3/seml-mode.el"))
        (h5 nil "conao3/seml-mode.el"))
      (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")

      (a ((href . "https://github.com/conao3/leaf.el"))
        (h5 nil "conao3/leaf.el"))
      (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")

      (a ((href . "https://github.com/conao3/cort-test.el"))
        (h5 nil "conao3/cort-test.el"))
      (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")))

  (div ((id . "license") (class . "section scrollspy"))
    (h4 nil "License")
    (div ((class . "section"))
    (h5 nil "AGPLv3")
    (p ((class . "caption")) "Copyright (C) 2019  Naoya Yamashita (@conao3) - https://conao3.com")
    (p ((class . "caption"))
      (a ((href . "https://www.gnu.org/licenses/agpl-3.0.html")) "https://www.gnu.org/licenses/agpl-3.0.html")))
    (div ((class . "section"))
      (h5 nil "License Description")
      (p ((class . "caption"))
        "このパッケージはGNU Emacsへの感謝をもって、RMSとFree Software Foundation, Inc.のフリーソフトウェアの理念に基づき、"
        "GPL系ライセンスであるAGPLv3のもとで公開します。")
      (p ((class . "caption"))
        "AGPLv3は有名なライセンスではありませんが、このパッケージは通常、インターネットを介したサーバー上で実行されるソフトではないため、多くの場合、GPLv3と変わりません。")
      (p ((class . "caption"))
        "私はGPLの基礎になっている自由ソフトウェアの" (a ((href . "https://www.gnu.org/licenses/quick-guide-gplv3.html")) "4つの理念")
        "に賛同し、このライセンスのもとで公開することで、このパッケージがあなたにとって最大の利益をもたらすことを願います。")
      (p ((class . "caption"))
        "なお、もしこのleaf-browser.elが役に立つ/面白いと感じられたなら、私の" (a ((href . "https://www.patreon.com/conao3")) "Patreon") "になってもらえないでしょうか。"
        "あなたの支援によって、このパッケージや他の全く新しいパッケージの開発を続けることが出来ます。")
      (p ((class . "caption"))
        "支援者の方には寄付のお礼と証明を兼ねて、このパッケージのホームページのフッターにアイコンを表示させていただきます。"
        "詳細は私の" (a ((href . "https://www.patreon.com/conao3")) "Patreon") "のページをご覧ください。よろしくお願いします。")))

  (div ((id . "author") (class . "section scrollspy"))
    (h4 nil "Author")
    (div ((class . "section"))
    (h5 nil "Naoya Yamashita (" (a ((href . "https://twitter.com/conao_3")) "@conao3") ")")
    (p ((class . "caption"))
      "広島県出身、広島新庄高校を卒業後、広島大学工学部第二類（電気・電子・システム・情報系）に入学。広島大学交響楽団に入団、バイオリンを担当。")
    (p ((class . "caption"))
      "2018年度現在、学籍上は四回生だが、一回生のときの教養の成績がたたり、情報系に振り分けられなかった。"
      "電子系に配属されてしまい、基準の単位数を2単位下回ったため研究室配属されず、留年が確定済み。")
    (p ((class . "caption"))
      "本年度は教職取得を目指し、高校普通教科情報及び工業高校の教職単位を教育学部にて履修するほか、CCNAと応用情報技術者試験の勉強、Emacsパッケージ開発に時間を使った。")
    (p ((class . "caption"))
      "Emacs-jp、Vim-jp、Shibuya.lispのSlackチャンネルに参加し、エンジニア交友を広めようとしている。Emacs-jpのinit.el読書会や忘年会、Shibuya.lispのもくもく会などに参加。"
      "Emacs-jpのブログ、「" (a ((href . "https://emacs-jp.github.io/2019/01/01/reboot-emacs-jp")) "2019年Emacs JPを再始動します") "」でも言及して頂いた。")
    (p ((class . "caption"))
      "CCNAはまだ受験できてませんが、" (a ((href . "https://twitter.com/conao_3/status/1085856941828534272")) "応用情報技術者試験に合格")
      "し、Emacsパッケージ開発などのOSS活動は" (a ((href . "https://github.com/conao3")) "GitHub") "にて確認できます。"
      "ぜひ" (a ((href . "https://www.patreon.com/conao3")) "Patreon") "での支援をお願いします！"))
    (div ((class . "section"))
      (h5 nil "作成したEmacsパッケージ")
      (div nil
        (a ((href . "https://github.com/conao3/leaf.el"))
          (h6 nil "leaf.el"))
        (p ((class . "caption"))
          "use-pacakgeの別実装をスクラッチから開発した。"
          "use-packageは最高だと思いつつ、キーワードの追加が（私にとって）難しく、付随する様々な問題が目立ってきたため開発に着手した。")
        (p ((class . "caption"))
          "スクラッチから開発したついでにEmacs-22という化石でも問題なく動くようにした。この設計はEmacs-jpで度々議論になる（）"))

      (div nil
        (a ((href . "https://github.com/conao3/leaf-browser.el"))
          (h6 nil "leaf-browser.el"))
        (p ((class . "caption"))
          "このパッケージ。Emacs-jpの雑談からアイデアを仕入れ、技術的な課題がないと思ったため開発に着手した。"
          "Emacsのhttpdサーバーでホストするのだから、Emacsフレンドリーな後述のSEMLを利用したところ、種々の問題が噴出した。"
          "しかしleaf-browser.elとともにseml-mode.elも成長できたので、今度SEMLを使うパッケージは効率的に開発できる。。はず。。？"))

      (div nil
        (a ((href . "https://github.com/conao3/seml-mode.el"))
          (h6 nil "seml-mode.el"))
        (p ((class . "caption"))
          "Emacs上のhttpdを使うならその元となるデータもS式のほうがEmacsフレンドリーなのではと思い、開発に着手した。"
          "当初はSEML用のインデント、ハイライトのみを提供するメジャーモードとして開発していたが、leaf-browser.elの開発に伴い、ユーティリティ関数も充実してきている。")
        (p ((class . "caption"))
          "使えば使うほどSEMLの" (strong nil "力") "に気付かされる。こいつ、本当にPHPと同じ力があるんじゃないのか。。？"
          "leaf-browser.elにSEMLを採用しなければ、leaf-browser.elは開発できなかった。")
        (p ((class . "caption"))
          "そもそもの元ネタはgauche。Lisp界では新しい発想ではないはずだが、Elisp界ではあまりそれを支援するパッケージはないみたいだった。。"))

      (div nil
        (a ((href . "https://github.com/conao3/cort-test.el"))
          (h6 nil "cort-test.el"))
        (p ((class . "caption"))
          "Emacs標準Elispテストフレームワークである、ert.elはEmacs-24からでのみ動作する他、（私にとって）理解不能なエラーメッセージを出力し、デバッグの助けにならなかったため開発に着手した。"
          "ert.elの柔軟なテスト記述を受け継ぎつつ、分かりやすく見やすいフィードバックを表示するように開発した。"
          "Emacs-22から動作するパッケージのテストに使うため、当然、Emacs-22でも動く。"))

      (div nil
        (a ((href . "https://github.com/conao3/feather.el"))
          (h6 nil "feather.el"))
        (p ((class . "caption"))
          "標準のpackage.elは「パッケージの並列ダウンロード」と「ダウンロード中のコンパイル」を実行せず、無為に時間を使っていると思ったため開発に着手した。"
          "leaf.elの:ensureキーワードの標準のバックエンドとして利用される。つまり、Emacs-22でも動く。"))

      (div nil
        (a ((href . "https://github.com/conao3/feather-recipes.el"))
          (h6 nil "feather-recipes.el"))
        (p ((class . "caption"))
          "feather.elがローカルで行う作業を少なくするために、MELPAのレシピから毎日feather.el用のS式を生成する。"
          "開発の過程でMELPAのrecipe.jsonが壊れている疑いが発生し、その修正のPRを作成して送った。")
        (p ((class . "caption"))
          "しかしMELPAのコアファイルであり、recipe.jsonはWeb上で公開され影響範囲が把握できないとの理由で未だにマージされていない。"
          "featuer-recipes.elは送ったPRをマージした、このレポジトリが毎日upstreamの更新をマージするように設定し、そのjsonを利用することで問題を回避した。"))

      (div nil
        (a ((href . "https://github.com/conao3/orglyth.el"))
          (h6 nil "orglyth.el"))
        (p ((class . "caption"))
          "org-mode文書群からディレクトリ階層ごとexportするorg-publishという機能があるが、その設定が曲者だったため開発に着手した。"
          "基本的にはorg-mode文書群から静的ブログサイトを出力する目的で使用する。私のブログもこのパッケージから出力された静的HTMLで運営されている。")))
    (div ((class . "section"))
      (h5 nil "執筆したQiita記事")
      (div nil
        (a ((href . "https://qiita.com/conao3/items/851f6dea9e94ce73f385"))
          (h6 nil "Makefileで.emacs.dの理想的なディレクトリ構造を生成する話 - Emacs Advent Calendar 2018 7日目"))
        (p ((class . "caption"))
          "Emacs-22, 23, 24, 25, 26が共存する環境でも問題なく動くディレクトリ構造を模索した。"))

      (div nil
        (a ((href . "https://qiita.com/conao3/items/098242804eb34da61f49"))
          (h6 nil "EmacsのパッケージもTravis Clしてbuild:passingしたい！ - Emacs Advent Calendar 2018 8日目"))
        (p ((class . "caption"))
          "cort-test.el紹介記事"))

      (div nil
        (a ((href . "https://qiita.com/conao3/items/f81cf964198d4da93a05"))
          (h6 nil "org-publishを使ってorgでブログを書く話 - Emacs Advent Calendar 2018 14日目"))
        (p ((class . "caption"))
          "orglyth.el紹介記事"))

      (div nil
        (a ((href . "https://qiita.com/conao3/items/82abfea7a4c81f946e60"))
          (h6 nil "use-packageからの移行のすゝめ - leaf.elでバージョン安全なinit.elを書く - Emacs Advent Calendar 2018 21日目"))
        (p ((class . "caption"))
          "leaf.el紹介記事")))))

