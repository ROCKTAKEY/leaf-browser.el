(let* ((form-fn (lambda (sym)
                  (let ((symstr (symbol-name sym)))
                    (pcase (get sym 'custom-type)
                      ('boolean
                       `((div ((class . "col s12"))
                           (label nil
                             (input ((name . ,(concat "input-" symstr))
                                     (type . "checkbox")))
                             (span nil ,symstr)))))
                      (_
                       `((div ((class . "col s12"))
                           (p ((class . "caption"))
                             "This custom type is not supported"))))))))
       (oneline-doc-fn  (lambda (sym)
                  (let ((symstr (symbol-name sym)))
                    `((div ((class . "col s12"))
                        (p ((class . "caption"))
                          ,@(if (stringp (get sym 'variable-documentation))
                                (cddr (seml-htmlize
                                       'emacs-lisp-mode
                                       (with-temp-buffer
                                         (insert (get sym 'variable-documentation))
                                         (goto-char (point-min))
                                         (move-end-of-line 1)
                                         (delete-region (point) (point-max))
                                         (buffer-substring-no-properties (point-min) (point-max)))))
                              '("No docstring..."))))))))
       (custom-type (cdr '(:dummy
                           boolean integer number float
                           file directory
                           function variable hook symbol coding-system face color
                           sexp key-sequence string character regexp)))
       (custom-piority-fn (lambda (x)
                            (if (atom (get x 'custom-type))
                                (length
                                 (memq (get x 'custom-type)
                                       custom-type))
                              0)))
       (alfa-sort-fn (lambda (a b)
                       (string< (symbol-name a)
                                (symbol-name b))))
       (type-sort-fn (lambda (a b)
                       (> (funcall custom-piority-fn a)
                          (funcall custom-piority-fn b))))
       (custom-elms (sort
                     (sort
                      (mapcan (lambda (elm)
                                (let ((sym  (car elm))
                                      (type (cadr elm)))
                                  (when (and (eq type 'custom-variable))
                                    `(,sym))))
                              (get lastarg-sym 'custom-group))
                      alfa-sort-fn)
                     type-sort-fn)))
  `(,@(progn (push path callstack) nil)
    ,@(if custom-elms
          (mapcar
           (lambda (sym)
             `(div ((class . "row"))
                (h5 nil ,(symbol-name sym))
                ,@(funcall form-fn sym)
                ,@(funcall oneline-doc-fn sym)
                (div ,(unless debugp '((class . "hide")))
                  ,@(seml-import ".custom-variables-debug.seml"))))
           custom-elms)
        `((div ((class . "row"))
            (div ((class . "col s12"))
              (h5 nil "No Custom Variables...")))))))




