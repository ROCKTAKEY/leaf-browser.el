`(,@(progn (push path callstack) nil)
  (pre nil
    ,@(mapcan
       (lambda (key)
         `((span ((class . "constant")) ,(symbol-name key))
           ": " ,(cond
                  ((memq key '(toc httpd-query httpd-request))
                   (seml-htmlize 'emacs-lisp-mode
                                 (pp-to-string (eval key))))
                  ((eq key 'callstack)
                   (seml-htmlize 'emacs-lisp-mode
                                 (prin1-to-string (eval key))
                                 nil
                                 (lambda ()
                                   (save-excursion
                                     (goto-char (point-min))
                                     (forward-char)
                                     (ignore-errors
                                       (while t
                                         (forward-sexp)
                                         (insert "\n")))
                                     (delete-backward-char 1)))))
                  (t
                   (concat (prin1-to-string (eval key)) "\n")))
           "\n"))
       (cdr `(:dammy-element
              callstack toc
              type
              ,@(if (<= 2 (length split-path))
                    (reverse
                     (mapcar (lambda (n)
                               (intern (format "arglast%s" n)))
                             (number-sequence 0 (- (length split-path)
                                                   (- lastarg-inx 1)
                                                   2))))
                  nil)
              homep groupp loadpathp infop ajaxp playgroundpundefinedp
              lbrowser-loaded-custom-group
              httpd-path httpd-query httpd-request httpd-split-path)))))
